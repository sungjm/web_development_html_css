포지셔닝 :
      HTML로 만든 웹 페이지는 하나의 기기로만 여는 것이 아니라서 위치값이 상대적입니다. 즉 상대적인 요소를 잡는데 포지셔닝이 중요한 역할을 함.

      1. position 속성 :

        https://showcases.yalco.kr/html-css/02-09/01.html 참조

          사이트 내부를 확인했을 때
          커다란 div(class="container") 내에 8개의 회색 div과 오렌지색 div(class="orange")가 있고, 오렌지 div 내부에 더 작은 div(class="red")가 있습니다.

          orange / red를 움직이면서 position 개념 학습.

          position 속성의 경우 HTML 요소들이 해당 페이지에서 어떻게 배치될지를 지정함.
            -> 중요한 점은 : 부모 요소의 것이 자식 속성에게 상속되지 '않음'
            cf - font-size의 경우 자식에게 상대값 형태(em)으로 상속이 됐던 것과 차이가 있습니다.

            1) static : top 30px left 30px 입력하더라도 페이지 상 변화 x 
              즉 static의 경우에는 원래 존재하는 페이지의 요소대로 따르기 때문에 위치 속성 지정을 하더라도 소용 x -> static(정적)인 상태

            2) relative : 원래있던 위치를 기준으로 top / left / right 등의 속성값이 적용됨. -> 요소 위치는 이동하는데 공백 위치는 그대로 유지됨. : 회색 상자들은 안움직였습니다.

            3) absolute : position 속성에서 'static이 아닌 첫 부모 요소를 기준으로 top, bottom, left, right, z-index 속성값을 이용하여 위치 조정 가능'
              첫 부모 -> 가장 바깥 쪽 태그 x 
                      -> position: absolute; 표기한 태그의 바로 윗 단계

              position 속성의 default 값은 : static

              특징 :
                자리를 차지하지 않는다.
                참조 사이트 기준으로 다른거 다 지운 상태로 
                position: absolute; 를 적용했을 경우에
                회색 사각형이 하나 사라진 것으로 보이는 이유는 :
                  실제로 사라진 것이 아니라 오렌지 div 태그에
                  겹쳐진 상태로 회색 사각형이 하나 있는 상태로 봐야 합니다.

                  -> 한칸씩 밀려 들어와 있다. -> 그 결과 눈에 보이는 것은 사각형이 8개만 존재.

            4) fixed : 항상 부모 요소가 아니라 뷰포트(viewport)를 기준으로 합니다.
              특징 : 스크롤에 영향을 받지 않는다. -> navigation bar와 같은 경우에는 스크롤을 내리더라도 존재해야 하기 때문에 응용이 가능할 수도 있습니다. -> 웹사이트에서 특정 팝업 창을 띄운 후에 스크롤과 상관없이 한 곳에 고정시킬 때 '유용함'

            5) sticky :
              어떤 요소가 스크롤로 이동할 수 있는 공간을 top, bottom, left, right, z-index 속성값을 이용하여 지정.
              특징 :
                부모 요소의 여백 등에도 영향을 받음.
                자식 요소의 위치를 고정(red div)해도 부모 요소의 위치(orange div)를 벗어나면 자식 요소는 더 이상 움직일 수 없기 때문에 sticky는 부모 요소의 안쪽이 아닌 동등하거나 바깥쪽 요소에 지정하는 편이 나음.

            6) z-index 속성 :
              x축 / y축 / z축에서 z축 관련 부분
              default값은 => auto로 되어있는데 = 0을 의미함.

              https://showcases.yalco.kr/html-css/02-09/02.html 참조

              n03zindex 생성

              flex 수업 예정

              https://showcases.yalco.kr/html-css/02-11/01.html

Flex layout :
  모든 웹 사이트는 커다란 레이아웃 형태로 되어있고, 이를 만드는 방식이 다양합니다.
  예전에는 HTML과 블록 요소만 이용해서 레이아웃을 작성했었으나, Flex 등장 이후에 CSS 기능을 적용하여 작성할 수 있게 됐습니다.

  부모에 적용하게 되는 flex / 자식에 적용하게 되는 flex
  참조 사이트 기준으로 회색 div은 부모 요소 / 보라색 div 자식 요소로 3개가 있습니다.

  div태그이기 때문에 block요소 적용되어있습니다. -> default 
  min-width: 40px;
  min-height: 40px;로 설정되어있습니다. -> 자식요소 

  1. display: flex; -> 세로 배치
  2. display: inline-flex; -> 부모 div 인라인 블록 상태됨
  해당 부모 요소를 블록으로 두는게 flex, 인라인으로 만드는게 inline-flex

  1) flex-direction 속성 :
    flex-direction: row;          -> 내부 요소를 왼쪽부터 차례로 정렬(메인 축이 x축이기 때문에 가로 배치)
    flex-direction: row-reverse;  
    flex-direction: column;       -> 내부 요소를 위에서부터 정렬(메인 축이 y축)
    flex-direction: column-reverse;

    reverse를 적용했을 시에 -> HTML 상으로는 div의 순서가 바뀌지 않지만
    웹 페이지 상에서의 눈으로 보는 순서가 뒤바뀜.

    flex-direction 속성에서 축의 방향을 어떻게 지정하느냐에 따라 달린 속성 :
      (1) justify-content :
        메인 축에서 내부요소를 정렬하는 방식
          flex-start : 시작지점부터 정렬
          flex-end : 끝부터 정렬
          center : 중간에 정렬
          space-between : 내부의 양쪽 요소를 처음과 끝 부분으로 보냄 그 중간값에 가운데를 배치함.

          cf) justify-content: start;
          cf) justify-content: end;로 쓰더라도 상관은 없는데 reverse 적용시킬 때 오류가 발생할 수도 있어서
          flex-start / flex-end를 생활화하는 게 정신건강에 좋습니다.

          space-around : 각 내부 요소의 양쪽에 일정한 크기의 빈 공간 배치함.
          space-evenly : 모든 빈 공간을 균일하게 배치함.

          -> flex-direction을 row로 배치하여 결과값을 보여드렸는데 column 기준으로는 복습해보시기 바랍니다.
      (2) align-items :
        flex의 수직 축(저희는 row로 수업하기 때문에 메인 축이 아닌 애를 의미함.)에서 내부 요소를 정렬할 방식을 지정함. -> default로 stretch를 지정함.
          stretch : 보조 축 방향을 꽉 채워줌.
          flex-start : 보조 축의 상단으로 내부 요소를 갖다 붙임.(즉 row로 설정했다면 y축 상단으로)
          flex-end : 보조 축의 하단으로 내부 요소를 갖다 붙임.

          마찬가지로 column을 기준으로 확인해보세요.

          이상에서 확인했듯이 flex 레이아웃의 경우 컨테이너 안에 있는 내부 요소들(자식 요소를 의미) 어느 방향으로 배치하느냐에 따라서 flex-direction / justify-content / align-items를 셋 다 조합해서 쓰는 경우가 많습니다
      (3) align-content

      여기서부터는 부모 요소의 영역을 넘어갈 정도로 많은 배치 방식
      (4) flex-wrap : 자식 요소가 부모 요소를 넘어가지 않도록 줄바꿈 -> 보통의 경우 컨텐츠가 한 줄이 아니고 여러 줄일 때 적용하는 편.

        flex-wrap: wrap;으로 잡아둔 상태에서의
          align-items vs. align-content 차이

          align-items : flex-start / center / flex-end로 지정했을 경우 각각
            가운데 여백이 같은 크기의 공백으로 나뉘어진 상태에서 내부 요소가 위쪽, 가운데, 아래쪽을 기준으로 정렬됨.

          align-content : flex-start / center / flex-end로 지정했을 경우 각각
            내부 요소 전체가 '공백이 없이' 위쪽, 가운데, 아래로 붙어 정렬됨.
                        space-between / space-round / space-evenly 속성이 있어 justify-content 속성과 비교 가능. -> 간격 조절 용도

          gap : 내부 요소들 사이에 들어가는 공백의 크기 지정 -> 단위 em 


    자식 요소에 적용하는 flex :

      https://showcases.yalco.kr/html-css/02-11/02.html 참조

      1) flex-basis : 메인 축의 길이(flex-direction이 row면 x축 / column이면 y축)을 지정.
      2) flex-grow : 기본값은 0로 되어있고, 공간이 남는 상태라면 빈 공간을 얼마나 가져갈지를 지정.
      3) flex-shrink : 공간이 부족한 상태에서 요소마다 크기를 얼마나 나눠 줄까를 지정.

      flex 레이아웃을 지정할 때는 flex-basis / grow / shrink와 같이 속성값을 하나하나 지정할 수 있는데,
      flex 내에 여러 개의 값을 작성해서 CSS 코드 한줄 짜리로 만들기도 합니다.
      순서에 따른 속성값은 다음과 같습니다.

      flex: (flex-grow 값);
      flex: (flex-grow 값) (flex-basis 값);
      flex: (flex-grow 값) (flex-shrink 값) (flex-basis 값);

      4) order : 부모 컨테이너 안에서 여러 개의 자식 요소들이 있을 때 순서를 임의로 바꿀 수 있습니다(HTML문서의 순서를 수정하는 것이 아니라)

      https://showcases.yalco.kr/html-css/02-11/04.html 참조

      chapter09 생성 후 
      n01flex 생성 

요소를 감추는 방법들 :
  웹 페이지 내에서는 필요에 따라서 특정 요소를 보이게끔 / 보이지 않게끔 조절할 필요가 있음.
  a. 원래 보이던 요소를 투명하게 바꾸는 것
  b. 요소가 안보이면서 + 적용 기능을 없애는 것

  1. CSS에서 요소를 숨기는 방법

  https://showcases.yalco.kr/html-css/02-10/02.html 참조

  opacity : 불투명도 조절 0~1 사이의 값
    1 : 불투명도 100%이므로 설정한 색깔이 그대로 드러남.
    0 : 불투명도 0이므로 투명하게 됨.
      특징 :
        해당 요소를 시각적으로 불투명 정도를 조절한 것이기 때문에 마우스 오버(:hover) 스크린 리더 기능 등은 그대로 남아있음.
          -> 그 결과 잘 안씀.

  visibility : 보이려면 visible / 안보이려면 hidden
    특징 :
      hidden 설정 했을 시 기존에 가지고 있던 기능들이 전부 해제됨(opacity와의 차이점)

  display : inline / inline-block으로 지정했을 시(block이 아니라)에
    display: none; 이라면, 기존 요소가 차지하고 있던 자리 마저 사라짐(visibility와의 차이점)
    아예 흔적 자체를 날려버리기 때문에 기존의 기능들도 당연히 쓰이지 않게 됨.

  마우스 커서 모양 바꾸기
    n02invisible 생성


  20250206 수업 예정 파트 -> BEM 관련 / @사용



