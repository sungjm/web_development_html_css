CSS Part 시작

HTML 요소만으로 웹 페이지를 생성할 수 있지만, 기본 형태만 갖추어진 상태입니다.
시각적인 요소, 디자인적인 요소를 가지고 웹 페이지를 '꾸며주는' 실질적인 역할을 담당하는 것이 CSS.

CSS를 적용하는 세 가지 방식

# 1 인라인 스타일 [inline style]
  : HTML 문서의 태그가 있는 라인마다 style 속성으로 CSS 코드를 일일이 넣어주는 방식
    여러 요소에 공통 속성을 부여할 수 없다는 단점.
    HTML과 CSS 코드가 분리되지 않기 때문에 제한적으로 사용.

# 2 내부 스타일 시트 [internal style sheet]
  : HTML의 <head> 태그 내에 <style> 태그를 집어넣고, 그 안에 CSS 코드를 작성하는 방식.
    인라인 스타일의 단점을 보완하여 공통 속성을 부여할 CSS를 일괄적으로 정리 가능.
    style이 너무 길어지게 될 경우에는 <head> 태그가 너무 길어져서 전체 HTML 문서의 양이 증가하기 때문에 style이 적은 경우에만 사용하는 편

# 3 링킹 스타일 시트 [linking style sheet]
  : HTML 문서 파일과 CSS 파일을 각각 분리해서 작성한 후에 서로 연결(link)하여 사용.
    HTML과 CSS 코드를 분리할 수 있고,
    '한 번 작성한 CSS 코드를 여러 HTML 파일에서 공통으로 사용 가능'하기 때문에 가장 널리 사용.

cssstyle.html
cssstyle.css

특히 # 3의 경우,
서로 분리된 두 파일을 연결하려면 <head> 태그 내애 <link> 태그를 넣어서(그래서 링킹스타일시트) 생성할 필요가 있습니다. 해당 경우에 rel="stylesheet"는 자동완성되는 편이고, href=""에 CSS 파일 경로를 작성해서 넣어주면 됩니다.

예시 href="./cssstyle.css"

선택자
  : CSS로 HTML 문서의 어떤 요소를 꾸미려고 할 때 꾸밀 대상을 올바르게 지정하기 위한 방식.
    "CSS가 특정 요소를 선택하여 스타일을 적용"하게 하는 중요한 역할.
  종류
    1. 기본 선택자 : 사실 기본선택자가 위에있는 설명이긴합니다. selector.html/css 파일을 생성.

    2. 태그 선택자 : HTML 문서에서 작성했던 p, span, h1, em, a 등의 각각의 태그를 지정하여 style을 작성하는 방식

    3. 클래스 선택자 : HTML 문서 작성시에(springboot에서도 했습니다) 태그 내에 class를 명시하는 경우가 있는데, id와 비슷해보이기는 합니다.
    하지만 클래스 선택은 페이지의 여러 곳에 '중복으로 사용할 수 있음'
    클래스 명을 복수로 지정하고 싶다면 하나의 클래스명 작성 뒤 공백(스페이스바)을 한 칸 띄우고 다음 클래스명을 작성하시면 됩니다. -> 예시는 selctor.html

    4. id 선택자 : 한 페이지에서 여러 요소를 공유해서 사용할 수 있는 클래스와 달리 id는 한 가지 요소에만 고유하게 사용. #으로 사용해서 지정합니다.

    5. 그룹 선택자 : 여러 요소를 한꺼번에 선택하고 싶을 때 쉼표로 원하는 요소를 이어 적으면 됩니다. -> 클래스랑 다른 이유는 클래스로 지정된 것 이외에도 다 사용이 가능하기 때문입니다. selector.css에서 /*그룹 선택자 */ 부분을 참조하세요.

    CSS 선택자는 좀 더 구체적으로 요소를 지정할수록, 그리고 나중에 작성할수록 우선순위를 가집니다.
    id 선택자 > 클래스 선택자 > 태그 선택자 > 기본 선택자
    순서입니다.

결합자 / 가상클래스 :
  복잡한 계층 구조 속에서 특정 조건을 만족하는 요소를 선택하는 결합자 및 가상 클래스를 이용해 CSS를 적용하는 좀 더 복합적인 방식에 대한 학습을 진행합니다.
  pseudoclass.html
  pseudoclass.css

  1) 자손 결합자 :
    class outer 다음에 공백, 그리고 li를 입력했었습니다.
    .outer li {}로 작성함.
    의미 : outer 클래스명 요소 내에 있는 모든 <li>태그에 olivedrab을 적용하라는 뜻.
    즉, 여기서 말하는 '자손'의 개념 : 일촌 자식, 손자, 증손자 등을 모두 포함하는 개념

    그렇다면, 모든 자손말고, 일촌 자식만 변경하고 싶다면(즉, 특정한 조건을 걸고 싶다면),
    일촌 자식 결합자(>)를 사용. pseudoclass.css로 돌아가서 /*자식(1촌 자식) 결합자 */ 참조

  2) 공생 결합자 :
    물결 표시(~)를 통해서 표시. 뒤따르는 동생들을 의미함.
    <ol> 태그 내에 <li class="starter"> 태그가 있는데, 이 클래스명 뒤에 물결표시를 하고 li를 명시하면 starter 뒤에 딸려있는 같은 레벨(위계)의 형제들을 모두 선택한다는 의미.

    pseudoclass.css에서 코드 작성 후에 확인하시면 '이삼' 뒤에 있는 텍스트부터 동생 결합자로 지정한 이텔릭체가 적용되어 있음을 확인할 수 있음.(이삼 포함이 아니라)

  3) 가상 클래스 :
    이상에서 한 부분들은 특정 id/class를 선택하여 스타일을 적용하는 방식 -> 결합자였다면,
    가상 클래스는 특정 상황을 가정하고 이름을 붙인다는 의미. 작성 방법은태그 뒤에 콜론(;)삽입. /*첫번째, 마지막 요소 가상 클래스 */ 참조.

https://flukeout.github.io
에 들어가시면 CSS 문제를 학습할 수 있습니다.
지금 학습한 수준으로는 한 절반정도 가능할 듯 합니다.

글자 스타일 
  이상에서 수업한 부분에서는 선택자 / 결합자 / 가상 클래스를 이용한 개념을 이해했다면,
  이제는 이상의 것들을 활용해서 스타일 속성을 지정하는 수업을 할 예정입니다.

  먼저 웹 페이지의 글자와 텍스트 속성을 지정하는 문법부터 할텐데 속성 종류가 많아서, 일부 부분만 발췌해서 수업합니다.

  개발 실무 관련
    웹에서 사용할 서체 설정의 경우 서체 종류를 지정하는 것부터 시작함.
    웹 폰트 개념을 알아야 하는데, 서체 결정을 하는 font-family에 관해서는 추후 자세히 수업하고, 여기서는 따라서 작성만 해보겠습니다.

  1. 기울임과 굵기
    1) font-style 속성 : 
      글자를 기울일 때 font-style 속성 사용하고, 그 값으로 italic / oblique로 태그로는 <i> / <em> 태그와 관련 있습니다.

      차이점 :
        italic - 글자를 기울인 서체로 적용
        oblique - 종이를 비틀어서 각도를 넣어 기울인 것

      이긴한데, 서체에 따라서 italic만 있는 애가 있고, oblique만 있는 애가 있습니다.
      이론적으로 큰 차이가 없어서 그런게 있다고만 아셔도 현재는 무방합니다.

    2) font-weight 속성 :
      글자의 굵기를 변경할 때 사용. 서체의 원래 굵기는 noraml / 굵게 표현하려면 bold입니다.
      <b> / <strong>와 대응합니다. 서체에 따라서 normal / bold 속성이 있는지 없는지도 다르고, 100~900 사이의 가중치를 두고 미세하게 굵기를 조정할 수 있는 등 서체의 특정에 따라서 사용해야 합니다.

      HTML에서 태그로 작성하면 브라우저마다 기본으로 기울임이나 굵기가 다르게 나오는 경우가 있어 사용자 경험에 차이가 있기 때문에, HTML 각 요소에 따라서 CSS를 설정하는 것이 보편적인 개발환경입니다. -> chapter06 생성

  2. 글자 크기
    1) font-size 속성 :
      픽셀(px) / 포인트(pt) : 절대값
      퍼센트(%) / em / rem : 상대값

      여기서 상대값(%, em, rem)은 부모 요소의 크기에 비례해서 나타납니다.
      ex) 부모 안에 자식이 있는 구조에서 자식에게 100%로 지정하면 부모의 font-size와 같은 크기
      120%면 1.2배, 90%면 0.9배의 글자 크기를 가지게 됩니다.
      이러한 100%, 120%, 90%을 100으로 나눠서 표기한 것이 -> em
      100% : 1em
      120% : 1.2em
      90% : 0.9em

      em의 경우 부모 자식 구조가 여러 단계로 중첩됐을 때 연쇄적으로 영향을 받는다는 문제점이 있음. 원하는 만큼 글자 크기를 조절하는 것이 더 복잡할 수도 있습니다.

      rem의 요소는 -> 가장 상위 부모, 즉 가장 바깥쪽에 있는 HTML요소를 기준으로 크기를 조절하는데, 중첩된 요소는 모두 동일한 크기가 적용됨.

      ex) 가장 상위 요소에 1.2rem을 적용하면, 여러 요소가 중첩되있어도, 가장 상위 요소의 1.2배 크기가 하위 중첩된 모든 요소에 동일하게 적용됨.
        -> 즉, 하위 요소를 하나의 크기로 동일할 때 유용하게 사용됨.

        이상의 파일들에 작성된 주석을 확인하고 계속 이어갑니다.

        서체 크기는 필요에 따라 절대값/상대값으로 표현 가능합니다.
        또 다른 서체 표현 방식은 추후 수업 예정

  3. 글자 꾸미기
    1) text-decoration 속성 :
      <u>태그에 해당하는 underline
      <s>태그에 해당하는 line-through
      윗줄 : overline

    2) text-transform 속성 :
      영문 알파벳 대소문자 표시에 사용되는 속성으로
      2)-1. none : 입력한 그대로 표시
      2)-2. capitalize : 각 단어의 첫 글자 대문자로 표기(처음부터 다 대문자면 적용 x)
      2)-3. uppercase : 전부 다 대문자로 바꿔줌.
      2)-4. lowercase : 전부 다 소문자로 바꿔줌.

      * 처음부터 대소문자 구분해서 사용하면 안되는건가?
        개발환경상에서 웹 페이지가 나타내는 텍스트는 HTML 문서에서 작성되기 보다는 서버에서 들어오는 경우가 많습니다. 그 경우 어떤 텍스트를 전달받게 될지 확신할 수 없기 때문에 CSS에서 설정합니다.

        textdecoration.html / css 만들겠습니다.
